import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, timedelta

API_TOKEN = '7234829726:AAHI1Cx9n-gt0Jxo-8UnpLE6-5HJHCHKo-I'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_data = {}  # user_id: {region, stage, name, date}
products = []

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
region_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–Ω–µ–ø—Ä")],
        [KeyboardButton(text="–ö–∏–µ–≤")],
        [KeyboardButton(text="–õ—å–≤–æ–≤")]
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω:", reply_markup=region_kb)
    user_data[message.from_user.id] = {"stage": "region"}

@dp.message()
async def handle_all(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    data = user_data[user_id]
    stage = data.get("stage")

    # —à–∞–≥ 1: –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
    if stage == "region":
        region = message.text
        if region not in ["–î–Ω–µ–ø—Ä", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤"]:
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω —Å –∫–Ω–æ–ø–∫–∏.")
            return
        data["region"] = region
        data["stage"] = "name"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    
    # —à–∞–≥ 2: –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    elif stage == "name":
        data["name"] = message.text
        data["stage"] = "date"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 28.07.2025):")
    
    # —à–∞–≥ 3: –≤–≤–æ–¥ –¥–∞—Ç—ã
    elif stage == "date":
        try:
            exp = datetime.strptime(message.text, "%d.%m.%Y")
            notify = exp - timedelta(days=5)
            products.append({
                "region": data["region"],
                "name": data["name"],
                "exp": exp,
                "notify": notify,
                "chat_id": message.chat.id
            })
            user_data.pop(user_id)
            await message.answer(
                f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                f"üìç –†–µ–≥–∏–æ–Ω: {data['region']}\n"
                f"üßÄ –ü—Ä–æ–¥—É–∫—Ç: {data['name']}\n"
                f"üìÖ –°—Ä–æ–∫: {exp.strftime('%d.%m.%Y')}\n"
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {notify.strftime('%d.%m.%Y')}",
                reply_markup=types.ReplyKeyboardRemove()
            )
        except:
            await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 28.07.2025")

async def reminder_loop():
    while True:
        now = datetime.now().date()
        for p in products:
            if p["notify"].date() == now:
                await bot.send_message(
                    p["chat_id"],
                    f"üì¶ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                    f"–í–µ—Ä–Ω—É—Ç—å {p['name']} (—Ä–µ–≥–∏–æ–Ω: {p['region']}) –Ω–∞ —Å–∫–ª–∞–¥.\n"
                    f"–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–æ {p['exp'].strftime('%d.%m.%Y')}."
                )
                p["notify"] += timedelta(days=9999)
        await asyncio.sleep(3600)  # —Ä–∞–∑ –≤ —á–∞—Å

async def main():
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())