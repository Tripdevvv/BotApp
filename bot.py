import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

API_TOKEN = '7234829726:AAHI1Cx9n-gt0Jxo-8UnpLE6-5HJHCHKo-I'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

products = []
user_states = {}

regions = ["–î–Ω–µ–ø—Ä", "–ö–∏–µ–≤", "–õ—å–≤–æ–≤"]

region_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=region, callback_data=f"region_{region}")] for region in regions
    ]
)

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω:", reply_markup=region_keyboard)

@dp.callback_query(F.data.startswith("region_"))
async def region_chosen(callback: CallbackQuery):
    region = callback.data.split("_")[1]
    user_states[callback.from_user.id] = {"region": region}
    await callback.message.answer(
        f"‚úÖ –†–µ–≥–∏–æ–Ω {region} –≤—ã–±—Ä–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏ —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü—Ä–∏–º–µ—Ä: –ú–æ—Ü–∞—Ä–µ–ª–ª–∞ 28.07.2025"
    )
    await callback.answer()

@dp.message()
async def get_product(message: Message):
    uid = message.from_user.id
    if uid not in user_states or "region" not in user_states[uid]:
        return await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω: /start")

    try:
        name, date_str = message.text.strip().split()
        exp_date = datetime.strptime(date_str, "%d.%m.%Y")
        notify_date = exp_date - timedelta(days=5)

        products.append({
            "chat_id": message.chat.id,
            "name": name,
            "exp": exp_date,
            "notify": notify_date,
            "region": user_states[uid]["region"]
        })

        await message.answer(
            f"üì¶ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"–†–µ–≥–∏–æ–Ω: {user_states[uid]['region']}\n"
            f"–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {exp_date.strftime('%d.%m.%Y')}\n"
            f"üîî –ù–∞–ø–æ–º–Ω—é: {notify_date.strftime('%d.%m.%Y')}"
        )
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ú–æ—Ü–∞—Ä–µ–ª–ª–∞ 28.07.2025")

async def reminder_loop():
    while True:
        now = datetime.now().date()
        for product in products:
            if product["notify"].date() == now:
                await bot.send_message(
                    product["chat_id"],
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                    f"–ü–æ—Ä–∞ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–¥—É–∫—Ç **{product['name']}** (—Ä–µ–≥–∏–æ–Ω: {product['region']}) –Ω–∞ —Å–∫–ª–∞–¥.\n"
                    f"–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {product['exp'].strftime('%d.%m.%Y')}."
                )
                product["notify"] += timedelta(days=9999)
        await asyncio.sleep(3600)  # –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å

async def main():
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())