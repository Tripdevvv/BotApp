import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message

API_TOKEN = 'YOUR_BOT_TOKEN'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü—Ä–æ—Å—Ç–∞—è in-memory –±–∞–∑–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
products = []

@dp.message(Command("–¥–æ–±–∞–≤–∏—Ç—å"))
async def cmd_add(message: Message):
    try:
        _, region, name, date_str = message.text.split()
        exp_date = datetime.strptime(date_str, "%d.%m.%Y")
        notify_date = exp_date - timedelta(days=5)
        
        products.append({
            "region": region,
            "name": name,
            "exp": exp_date,
            "notify": notify_date,
            "chat_id": message.chat.id
        })

        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            f"–ü—Ä–æ–¥—É–∫—Ç: {name}\n"
            f"–†–µ–≥–∏–æ–Ω: {region}\n"
            f"–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {exp_date.strftime('%d.%m.%Y')}\n"
            f"üîî –ù–∞–ø–æ–º–Ω—é {notify_date.strftime('%d.%m.%Y')}"
        )
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /–¥–æ–±–∞–≤–∏—Ç—å –î–Ω–µ–ø—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞ 28.07.2025")

async def reminder_loop():
    while True:
        now = datetime.now()
        for p in products:
            if p["notify"].date() == now.date():
                await bot.send_message(
                    p["chat_id"],
                    f"üì¶ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                    f"–ü–æ—Ä–∞ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–¥—É–∫—Ç **{p['name']}** (—Ä–µ–≥–∏–æ–Ω: {p['region']}) –Ω–∞ —Å–∫–ª–∞–¥.\n"
                    f"–°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–µ—Ç {p['exp'].strftime('%d.%m.%Y')}."
                )
                p["notify"] += timedelta(days=9999)  # –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å

async def main():
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())