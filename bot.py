import asyncio
import logging
from datetime import datetime, time, timedelta
from io import BytesIO
import os
import pytz
import psycopg2

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from PIL import Image
import imagehash

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
if not API_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

chat_ids = [7481122885, 987654321]  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ chat_id
sticker_id = 'CAACAgIAAyEFAASrJ8mAAANMaErQZWKogCvCcFz9Lsbau15gV2EAAvkfAAIbjKlKW3Z0JKAra_42BA'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_URL = "postgresql://tgbotbdhash_owner:npg_gfBetc17QRZO@ep-lingering-glade-a8g30xtc-pooler.eastus2.azure.neon.tech/tgbotbdhash?sslmode=require"
MAX_HAMMING_DISTANCE = 5

def get_db_connection():
    return psycopg2.connect(DB_URL)

def init_db():
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS photo_hashes (
                hash TEXT PRIMARY KEY,
                message_id INTEGER,
                chat_id BIGINT,
                user_id BIGINT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()
        logging.info("–¢–∞–±–ª–∏—Ü–∞ photo_hashes —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        if 'conn' in locals():
            conn.close()

def load_hashes():
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT hash, message_id FROM photo_hashes")
        hashes = dict(cur.fetchall())
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(hashes)} —Ö—ç—à–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        return hashes
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ö—ç—à–µ–π: {str(e)}")
        return {}
    finally:
        if 'conn' in locals():
            conn.close()

def save_hash(hash_value: str, message_id: int, chat_id: int, user_id: int):
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO photo_hashes (hash, message_id, chat_id, user_id) VALUES (%s, %s, %s, %s) "
            "ON CONFLICT (hash) DO NOTHING",
            (hash_value, message_id, chat_id, user_id)
        )
        conn.commit()
        logging.info(f"–•—ç—à —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ö—ç—à–∞: {str(e)}")
    finally:
        if 'conn' in locals():
            conn.close()

processed_hashes = load_hashes()

CHECKIN_TEXT = (
    "–ù–∞–ø–æ–º–∏–Ω–∞—é —Å–¥–µ–ª–∞—Ç—å —á–µ–∫-–∏–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ @PizzaDayStaffBot, –Ω–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–π —á–µ–∫-–∏–Ω ‚Äî –ø–æ—Ç–µ—Ä—è –¥–µ–Ω—é–∂–µ–∫ :(\n\n"
    "1. –§–æ—Ç–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤\n"
    "2. –§–æ—Ç–æ —Ñ–æ—Ä–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–º–µ–Ω–µ\n"
    "3. –§–æ—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥–æ—Ç–æ–≤–æ–∫ –Ω–∞ –∫—É—Ö–Ω–µ\n"
    "4. –§–æ—Ç–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –≤—ã–≤–µ—Å–∫–∏\n"
    "5. –§–æ—Ç–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –ø–µ—á–∏\n"
    "6. –§–æ—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞—Ö (—Ä–∞—Å–∫–ª–∞–¥–∫–∞ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫)\n"
    "7. –§–æ—Ç–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏\n"
    "8. –§–æ—Ç–æ –º–æ—Ä–æ–∑–∏–ª–∫–∏\n"
    "9. –§–æ—Ç–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –≤—ã—Ç—è–∂–∫–∏"
)

SIGN_TEXT = "–ù–∞–ø–æ–º–∏–Ω–∞—é –≤–∫–ª—é—á–∏—Ç—å –≤—ã–≤–µ—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–æ—á–µ—Ç :)"

CHECKOUT_TEXT = (
    "–ù–∞–ø–æ–º–∏–Ω–∞—é —Å–¥–µ–ª–∞—Ç—å —á–µ–∫-–∞—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ @PizzaDayStaffBot\n\n"
    "–¢–∞–∫–∂–µ –∂–¥—É –§–æ—Ç–æ–æ—Ç—á–µ—Ç –∑–∞–º—ã–≤–∫–∏:\n"
    "1. –ú–æ–¥—É–ª—å –Ω–∞—Ä–µ–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Å–Ω–∞—Ä—É–∂–∏ –∏ –≤–Ω—É—Ç—Ä–∏\n"
    "2. –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫—É—é –ø–æ–ª–∫—É –Ω–∞–¥ –º–æ–π–∫–æ–π\n"
    "3. –ú–æ–π–∫—É\n"
    "4. –ú–æ–¥—É–ª—å —Ä–∞—Å–∫–∞—Ç–∫–∏ —Ç–µ—Å—Ç–∞\n"
    "5. –¢–µ—Å—Ç–æ–º–µ—Å\n"
    "6. –†–∞—Å–∫–ª–∞–¥–∫—É —Å–Ω–∞—Ä—É–∂–∏ –∏ –≤–Ω—É—Ç—Ä–∏\n"
    "7. –ñ–µ–ª—Ç—ã–µ –ø–æ–ª–∫–∏\n"
    "8. –ú–æ–¥—É–ª—å –Ω–∞—Ä–µ–∑–∫–∏ –ø–∏—Ü—Ü\n"
    "9. –ö–∞—Å—Å–æ–≤—É—é –∑–æ–Ω—É\n"
    "10. –ß–∏—Å—Ç—ã–π –ø–æ–ª\n"
    "11. –ß–∏—Å—Ç—É—é –ª–æ–ø–∞—Ç—É\n"
    "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    "1. –í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—ã/–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã/–ø–µ—á—å/–º—É—Ö–æ–±–æ–π–∫–∞/–≤—ã—Ç—è–∂–∫–∞\n"
    "2. –ó–∞–∫—Ä—ã—Ç–∞—è —Ä–∞—Å–∫–ª–∞–¥–∞\n"
    "3. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ä–∞—Å–∫–ª–∞–¥–µ\n"
    "4. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ"
)

async def schedule_reminder(remind_time: time, text: str):
    timezone = pytz.timezone("Europe/Kiev")
    while True:
        try:
            now = datetime.now(timezone)
            target = datetime.combine(now.date(), remind_time, tzinfo=timezone)
            if target < now:
                target += timedelta(days=1)
            wait_seconds = (target - now).total_seconds()
            logging.info(f"–ñ–¥—É {wait_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è '{text[:20]}...'")
            await asyncio.sleep(wait_seconds)
            await send_reminder_all(text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ schedule_reminder: {str(e)}")
            await asyncio.sleep(60)

async def send_reminder_all(text: str):
    for chat_id in chat_ids:
        try:
            await bot.send_message(chat_id, text)
            logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}")

@dp.message_handler(commands=['checkin'])
async def cmd_checkin(message: types.Message):
    try:
        await message.reply(CHECKIN_TEXT)
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /checkin –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_checkin: {str(e)}")

@dp.message_handler(commands=['checkout'])
async def cmd_checkout(message: types.Message):
    try:
        await message.reply(CHECKOUT_TEXT)
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /checkout –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_checkout: {str(e)}")

@dp.message_handler(commands=['sign'])
async def cmd_sign(message: types.Message):
    try:
        await message.reply(SIGN_TEXT)
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /sign –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_sign: {str(e)}")

@dp.message_handler(commands=['menu'])
async def cmd_menu(message: types.Message):
    try:
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        buttons = [
            InlineKeyboardButton(
                text="üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã",
                url="https://docs.google.com/spreadsheets/d/1HtCpJSc_Y8MF4BcYzYaz6rL7RvzrPY7s/edit"
            ),
            InlineKeyboardButton(
                text="üõí –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                url="https://docs.google.com/spreadsheets/d/1HtCpJSc_Y8MF4BcYzYaz6rL7RvzrPY7s/edit"
            ),
            InlineKeyboardButton(
                text="üìã –ß–µ–∫-–ª–∏—Å—Ç –∑–∞–∫—É–ø–∫–∏",
                url="https://docs.google.com/spreadsheets/d/1HtCpJSc_Y8MF4BcYzYaz6rL7RvzrPY7s/edit"
            )
        ]
        
        keyboard.add(*buttons)
        
        await message.reply("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:", reply_markup=keyboard)
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /menu –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_menu: {str(e)}")

async def get_image_hash(file_id: str) -> str:
    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        byte_stream = await bot.download_file(file_path)
        image = Image.open(BytesIO(byte_stream.read())).convert("RGB")
        hash_str = str(imagehash.phash(image))
        return hash_str
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö—ç—à–∞ —Ñ–æ—Ç–æ: {str(e)}")
        raise

def hamming_distance(hash1: str, hash2: str) -> int:
    try:
        return bin(int(hash1, 16) ^ int(hash2, 16)).count('1')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ Hamming —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
        return float('inf')

@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message):
    try:
        if message.chat.id not in chat_ids:
            return
            
        photo = message.photo[-1]
        user_id = message.from_user.id
        chat_id = message.chat.id
        file_id = photo.file_id
        message_id = message.message_id

        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")

        photo_hash = await get_image_hash(file_id)

        for saved_hash, saved_msg_id in processed_hashes.items():
            dist = hamming_distance(photo_hash, saved_hash)
            if dist <= MAX_HAMMING_DISTANCE:
                logging.info(f"–§–æ—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞–π–¥–µ–Ω–æ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º {dist}: {photo_hash} vs {saved_hash}")
                await message.reply(
                    f"–≠—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ (–ø–æ—Ö–æ–∂–µ—Å—Ç—å: {dist}). "
                    f"–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{saved_msg_id}"
                )
                await message.answer_sticker(sticker_id)
                await bot.forward_message(chat_id=chat_id, from_chat_id=chat_id, message_id=saved_msg_id)
                return

        processed_hashes[photo_hash] = message_id
        save_hash(photo_hash, message_id, chat_id, user_id)
        logging.info(f"–ù–æ–≤—ã–π —Ö—ç—à –¥–æ–±–∞–≤–ª–µ–Ω: {photo_hash}")

        await message.reply("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–∏–Ω—è—Ç–∞!")
        logging.info(f"–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_photo: {str(e)}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ :(")

async def on_startup(dp):
    try:
        init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤–µ–±—Ö—É–∫–∏, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        # await bot.set_webhook(WEBHOOK_URL)
        
        # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        asyncio.create_task(schedule_reminder(time(hour=9, minute=45), CHECKIN_TEXT))
        asyncio.create_task(schedule_reminder(time(hour=15, minute=30), SIGN_TEXT))
        asyncio.create_task(schedule_reminder(time(hour=22, minute=14), CHECKOUT_TEXT))
        
        logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞: {str(e)}")

async def on_shutdown(dp):
    try:
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤–µ–±—Ö—É–∫–∏, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        # await bot.delete_webhook()
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {str(e)}")

if __name__ == '__main__':
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –≤–µ–±—Ö—É–∫–æ–≤
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown, skip_updates=True)
    
    # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±—Ö—É–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ Render)
    # executor.start_webhook(
    #     dispatcher=dp,
    #     webhook_path=WEBHOOK_PATH,
    #     on_startup=on_startup,
    #     on_shutdown=on_shutdown,
    #     skip_updates=True,
    #     host='0.0.0.0',
    #     port=int(os.getenv('PORT', 10000))
    # )