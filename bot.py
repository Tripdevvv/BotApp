import asyncio
import logging
from threading import Thread
from datetime import datetime, time, timedelta
from io import BytesIO
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from PIL import Image
import imagehash
import psycopg2
from fastapi import FastAPI
from starlette.middleware.cors import CORSMiddleware
import uvicorn
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
if not API_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

DB_URL = "postgresql://tgbotbdhash_owner:npg_gfBetc17QRZO@ep-lingering-glade-a8g30xtc-pooler.eastus2.azure.neon.tech/tgbotbdhash?sslmode=require"
MAX_HAMMING_DISTANCE = 5
chat_ids = [7481122885, 987654321]
sticker_id = 'CAACAgIAAyEFAASrJ8mAAANMaErQZWKogCvCcFz9Lsbau15gV2EAAvkfAAIbjKlKW3Z0JKAra_42BA'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FastAPI –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è
app = FastAPI()
app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_methods=["*"], allow_headers=["*"])

@app.get("/")
async def root():
    logging.info("Root endpoint called")
    return {"status": "Bot is alive!"}

@app.get("/health")
async def health_check():
    logging.info("Health check endpoint called")
    return {"status": "healthy"}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return psycopg2.connect(DB_URL)

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cur.execute("""
            CREATE TABLE IF NOT EXISTS photo_hashes (
                hash TEXT PRIMARY KEY,
                message_id INTEGER,
                chat_id BIGINT,
                user_id BIGINT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü chat_id, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        cur.execute("""
            DO $$
            BEGIN
                IF NOT EXISTS (
                    SELECT FROM information_schema.columns
                    WHERE table_name = 'photo_hashes' AND column_name = 'chat_id'
                ) THEN
                    ALTER TABLE photo_hashes ADD COLUMN chat_id BIGINT;
                END IF;
            END $$;
        """)
        conn.commit()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        conn.rollback()
    finally:
        cur.close()
        conn.close()

def clean_old_hashes():
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("DELETE FROM photo_hashes WHERE timestamp < NOW() - INTERVAL '14 days'")
        deleted = cur.rowcount
        conn.commit()
        logging.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã: {e}")
    finally:
        if 'conn' in locals():
            conn.close()

async def periodic_cleanup():
    while True:
        clean_old_hashes()
        await asyncio.sleep(14 * 24 * 60 * 60)  # 14 –¥–Ω–µ–π

def load_hashes():
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT hash, message_id, chat_id FROM photo_hashes WHERE chat_id IS NOT NULL")
        return {(row[0], row[2]): row[1] for row in cur.fetchall()}  # (hash, chat_id): message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ö—ç—à–µ–π: {e}")
        return {}
    finally:
        if 'conn' in locals():
            conn.close()

def save_hash(hash_value: str, message_id: int, chat_id: int, user_id: int):
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO photo_hashes (hash, message_id, chat_id, user_id) VALUES (%s, %s, %s, %s) "
            "ON CONFLICT (hash) DO NOTHING",
            (hash_value, message_id, chat_id, user_id)
        )
        conn.commit()
        logging.info(f"–•—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {hash_value}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ö—ç—à–∞: {e}")
    finally:
        if 'conn' in locals():
            conn.close()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—ç—à–µ–π
photo_hashes = load_hashes()

# –¢–µ–∫—Å—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
CHECKIN_TEXT = (
    "–ù–∞–ø–æ–º–∏–Ω–∞—é —Å–¥–µ–ª–∞—Ç—å —á–µ–∫-–∏–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ @PizzaDayStaffBot, –Ω–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–π —á–µ–∫-–∏–Ω ‚Äî –ø–æ—Ç–µ—Ä—è –¥–µ–Ω—é–∂–µ–∫ :(\n\n"
    "1. –§–æ—Ç–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤\n"
    "2. –§–æ—Ç–æ —Ñ–æ—Ä–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–º–µ–Ω–µ\n"
    "3. –§–æ—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥–æ—Ç–æ–≤–æ–∫ –Ω–∞ –∫—É—Ö–Ω–µ\n"
    "4. –§–æ—Ç–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –≤—ã–≤–µ—Å–∫–∏\n"
    "5. –§–æ—Ç–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –ø–µ—á–∏\n"
    "6. –§–æ—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞—Ö (—Ä–∞—Å–∫–ª–∞–¥–∫–∞ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫)\n"
    "7. –§–æ—Ç–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏\n"
    "8. –§–æ—Ç–æ –º–æ—Ä–æ–∑–∏–ª–∫–∏\n"
    "9. –§–æ—Ç–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –≤—ã—Ç—è–∂–∫–∏"
)

SIGN_TEXT = "–ù–∞–ø–æ–º–∏–Ω–∞—é –≤–∫–ª—é—á–∏—Ç—å –≤—ã–≤–µ—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–æ—á–µ—Ç :)"

CHECKOUT_TEXT = (
    "–ù–∞–ø–æ–º–∏–Ω–∞—é —Å–¥–µ–ª–∞—Ç—å —á–µ–∫-–∞—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ @PizzaDayStaffBot\n\n"
    "–¢–∞–∫–∂–µ –∂–¥—É –§–æ—Ç–æ–æ—Ç—á–µ—Ç –∑–∞–º—ã–≤–∫–∏:\n"
    "1. –ú–æ–¥—É–ª—å –Ω–∞—Ä–µ–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Å–Ω–∞—Ä—É–∂–∏ –∏ –≤–Ω—É—Ç—Ä–∏\n"
    "2. –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫—É—é –ø–æ–ª–∫—É –Ω–∞–¥ –º–æ–π–∫–æ–π\n"
    "3. –ú–æ–π–∫—É\n"
    "4. –ú–æ–¥—É–ª—å —Ä–∞—Å–∫–∞—Ç–∫–∏ —Ç–µ—Å—Ç–∞\n"
    "5. –¢–µ—Å—Ç–æ–º–µ—Å\n"
    "6. –†–∞—Å–∫–ª–∞–¥–∫—É —Å–Ω–∞—Ä—É–∂–∏ –∏ –≤–Ω—É—Ç—Ä–∏\n"
    "7. –ñ–µ–ª—Ç—ã–µ –ø–æ–ª–∫–∏\n"
    "8. –ú–æ–¥—É–ª—å –Ω–∞—Ä–µ–∑–∫–∏ –ø–∏—Ü—Ü\n"
    "9. –ö–∞—Å—Å–æ–≤—É—é –∑–æ–Ω—É\n"
    "10. –ß–∏—Å—Ç—ã–π –ø–æ–ª\n"
    "11. –ß–∏—Å—Ç—É—é –ª–æ–ø–∞—Ç—É\n"
    "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    "1. –í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—ã/–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã/–ø–µ—á—å/–º—É—Ö–æ–±–æ–π–∫–∞/–≤—ã—Ç—è–∂–∫–∞\n"
    "2. –ó–∞–∫—Ä—ã—Ç–∞—è —Ä–∞—Å–∫–ª–∞–¥–∞\n"
    "3. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ä–∞—Å–∫–ª–∞–¥–µ\n"
    "4. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ"
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['menu'])
async def cmd_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton(text="üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", url="https://docs.google.com/spreadsheets/d/1HtCpJSc_Y8MF4BcYzYaz6rL7RvzrPY7s/edit"),
        InlineKeyboardButton(text="üõí –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", url="https://docs.google.com/spreadsheets/d/1HtCpJSc_Y8MF4BcYzYaz6rL7RvzrPY7s/edit")
    ]
    keyboard.add(*buttons)
    await message.reply("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:", reply_markup=keyboard)

@dp.message_handler(commands=['checkin'])
async def cmd_checkin(message: types.Message):
    await message.reply(CHECKIN_TEXT)

@dp.message_handler(commands=['checkout'])
async def cmd_checkout(message: types.Message):
    await message.reply(CHECKOUT_TEXT)

@dp.message_handler(commands=['sign'])
async def cmd_sign(message: types.Message):
    await message.reply(SIGN_TEXT)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
def hamming_distance(hash1: str, hash2: str) -> int:
    try:
        return bin(int(hash1, 16) ^ int(hash2, 16)).count('1')
    except Exception:
        return float('inf')

async def get_image_hash(file_id: str) -> str:
    try:
        file = await bot.get_file(file_id)
        byte_stream = BytesIO()
        await file.download(destination_file=byte_stream)
        image = Image.open(byte_stream).convert("RGB")
        return str(imagehash.phash(image))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return ""

@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message):
    if message.chat.id not in chat_ids:
        return
    
    try:
        photo = message.photo[-1]
        photo_hash = await get_image_hash(photo.file_id)
        
        if not photo_hash:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ö—ç—à–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        duplicate_found = False
        for (saved_hash, saved_chat_id), saved_msg_id in photo_hashes.items():
            if saved_chat_id == message.chat.id and hamming_distance(photo_hash, saved_hash) <= MAX_HAMMING_DISTANCE:
                duplicate_found = True
                await message.reply(
                    f"‚ö†Ô∏è –≠—Ç–æ —Ñ–æ—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ #{saved_msg_id})"
                )
                await message.answer_sticker(sticker_id)
                await bot.forward_message(
                    chat_id=message.chat.id,
                    from_chat_id=message.chat.id,
                    message_id=saved_msg_id
                )
                break
        
        if not duplicate_found:
            photo_hashes[(photo_hash, message.chat.id)] = message.message_id
            save_hash(photo_hash, message.message_id, message.chat.id, message.from_user.id)
            await message.reply("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–∏–Ω—è—Ç–∞!")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def schedule_reminder(remind_time: time, text: str):
    timezone = pytz.timezone("Europe/Kiev")
    while True:
        now = datetime.now(timezone)
        target = datetime.combine(now.date(), remind_time, tzinfo=timezone)
        if target < now:
            target += timedelta(days=1)
        await asyncio.sleep((target - now).total_seconds())
        await send_reminder_all(text)

async def send_reminder_all(text: str):
    for chat_id in chat_ids:
        try:
            await bot.send_message(chat_id, text)
            logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dp):
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("Webhook deleted successfully")
    except Exception as e:
        logging.error(f"Error deleting webhook: {e}")

    init_db()
    asyncio.create_task(schedule_reminder(time(9, 45), CHECKIN_TEXT))
    asyncio.create_task(schedule_reminder(time(15, 30), SIGN_TEXT))
    asyncio.create_task(schedule_reminder(time(22, 14), CHECKOUT_TEXT))
    asyncio.create_task(periodic_cleanup())
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

def run_fastapi():
    port = int(os.getenv("PORT", 10000))
    logging.info(f"Starting FastAPI on port: {port}")
    try:
        uvicorn.run(app, host="0.0.0.0", port=port)
    except Exception as e:
        logging.error(f"Failed to start FastAPI: {e}")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    fastapi_thread = Thread(target=run_fastapi, daemon=True)
    fastapi_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)